#!/bin/sh

# I'm sorry…

LIMIT_DISK_USAGE=90
LIMIT_LOAD=$(echo "$(grep processor /proc/cpuinfo | wc -l) * 2" | bc)

TRUNC_HOSTNAME=$(hostname -f | cut -d. -f1-2)

send_mqtt_message () {
  error_level=$1
  component=$2
  message=$3

  if [ -n "$DEBUG" ]; then
    echo mosquitto_pub --capath /etc/ssl/certs/ -h \"{{ mqtt.server }}\" -u \"{{ mqtt.username }}\" -P \"{{ mqtt.password }}\" -t \"/voc/alert\" -m \"{\"level\":\"${error_level}\",\"component\":\"${component}\",\"msg\":\"${message}\"}\"
  else
    mosquitto_pub --capath /etc/ssl/certs/ -h "{{ mqtt.server }}" -p 8883 -u "{{ mqtt.username }}" -P "{{ mqtt.password }}" -t "/voc/alert" -m "{\"level\":\"${error_level}\",\"component\":\"${component}\",\"msg\":\"${message}\"}"
  fi
}

check_disk_space () {
  df -h | tail -n +2 | while read line; do
    mount_point=$(echo $line | awk '{ print $1 }')
    disk_usage_percent=$(echo $line | awk '{ print $5 }' | tr -d '%')
    disk_space=$(echo $line | awk '{ print $2 }')
    disk_space_avilable=$(echo $line | awk '{ print $4 }')

    if [ "$disk_usage_percent" -ge "$LIMIT_DISK_USAGE" ]; then
      send_mqtt_message "error" "system/disk/${TRUNC_HOSTNAME}" "<red>$mount_point: disk usage $disk_usage_percent%, only $disk_space_avilable left of $disk_space</red>"
    fi
  done
}


check_load () {
  local load_1_minute=$(cut -d' ' -f 1 /proc/loadavg)
  local load_5_minutes=$(cut -d' ' -f 2 /proc/loadavg)
  local load_15_minutes=$(cut -d' ' -f 3 /proc/loadavg)

  local truncated_load=$(echo "$load_5_minutes" | cut -d. -f1)

  if [ "$truncated_load" -ge "$LIMIT_LOAD" ]; then
    send_mqtt_message "error" "system/load/${TRUNC_HOSTNAME}" "system load: $load_1_minute, $load_5_minutes, $load_15_minutes</red>"
  fi
}

check_recording () {
  systemctl is-active voctomix-recording-sink.service >/dev/null
  if [ "0" -eq "$?" ]; then
    message=$(perl /usr/local/bin/check_recording.pl /video/capture/{{ event.acronym }}/)
    error_code=$?

    if [ "2" -eq "$error_code" ]; then
      send_mqtt_message "error" "recording/${TRUNC_HOSTNAME}" "<red>${message}</red> /video/capture/{{ event.acronym }}/"
    fi
  fi
}

# check_raid implements:
#
#  * mdadm status of existing md devices
#  * megacli raid controller status via wrapper raidstatus
#    (available e.g. on storage and ${TRUNC_HOSTNAME})
#  * megacli battery status via wrapper raidstatus
#
check_raid () {
  if [ -e "/proc/mdstat" ]; then
    cat /proc/mdstat | awk '/^md/ {printf "%s: ", $1}; /blocks/ {print $NF}' | while read line; do
      raid_device=$(echo $line | cut -d ":" -f 1)
      raid_device_state=$(echo $line | cut -d " " -f 2)

      echo $raid_device_state | grep -q "_"
      if [ "0" -eq "$?" ]; then
        send_mqtt_message "error" "system/raid/${TRUNC_HOSTNAME}" "<red>RAID disk failed: $raid_device: $raid_device_state"
      fi
    done
  fi

  if [ -e "/usr/local/sbin/raidstatus" ]; then
    raid_status=$(raidstatus status | grep -v "Current" | grep "State")
    if [ "0" -eq "$?" ]; then
      echo $raid_status | grep -q "Optimal"
      if [ "1" -eq "$?" ]; then
        send_mqtt_message "error" "system/raid/${TRUNC_HOSTNAME}" "<red>RAID status is not 'Optimal': please run 'raidstatus status' for more information</red>"
      fi
    fi

    bat_status=$(raidstatus bat | grep "Battery State:")
    echo $bat_status | grep -q "Optimal"
    if [ "0" -eq "$?" ]; then
      if [ "1" -eq "$?" ]; then
        send_mqtt_message "error" "system/raid/${TRUNC_HOSTNAME}" "<red>RAID battery status is not 'Optimal': please run 'raidstatus bat' for more information</red>"
      fi
    fi
  fi
}


# check_logs implements:
#   It checks the kernel logs generated in the last 10 minutes according to the
#   following errors:
#
#     * OOM situations
#     * hanging tasks for more then 120 seconds
#     * CPU throttling
#
check_logs () {
  kernel_log=$(journalctl _TRANSPORT=kernel --since "10 minutes ago")

  task_blocked=$(echo $kernel_log | grep -q "blocked for more than")
  if [ "0" -eq "$?" ]; then
    send_mqtt_message "error" "system/kernel/${TRUNC_HOSTNAME}" "<red>Task '$(echo $task_blocked | awk '{ print $8 }' | xargs | tr ' ' ',')' blocked for more than 120 seconds.</red>"
  fi

  oom_messages=$(echo $kernel_log | grep -q "Out of memory")
  if [ "0" -eq "$?" ]; then
    send_mqtt_message "error" "system/kernel/${TRUNC_HOSTNAME}" "<red>OOM killer killed processes!</red>"
  fi

  throttle_messages=$(echo $kernel_log | grep -q "cpu clock throttled")
  if [ "0" -eq "$?" ]; then
    send_mqtt_message "error" "system/kernel/${TRUNC_HOSTNAME}" "<red>CPU throttled!</red>"
  fi
}


# check_interfaces implements:
#
#   * full-duplex check
#   * line speed test for at least 1gbit
#
# limitations:
#
#   * check only work on real hardware.
#   * ignored interfaces:
#     + down status
#     + with tags
#     + bridges
#     + loopback
#  * no bond status check
#
check_interfaces () {
  for interface in $(grep "iface" /etc/network/interfaces | grep -vE "iface lo |#|br|bond.*\..*|monitoring-ignore-me" | awk '{ print $2 }' | sort | uniq); do
    if [ "$(systemd-detect-virt)" = "none" ] && [ "$(grep -q up /sys/class/net/${interface}/operstate; echo $?)" -eq "0" ]; then
      # we need at least 1gbit
      if [ -e "/sys/class/net/${interface}/speed" ]; then
        if [ "$(cat /sys/class/net/${interface}/speed)" -lt "1000" ]; then
          send_mqtt_message "error" "system/interface/${interface}/${TRUNC_HOSTNAME}" "<red>${interface} has lass then 1Gbit/s</red>"
        fi
      fi
      # we need full-dumplex
      if [ -e "/sys/class/net/${interface}/duplex" ]; then
        if [ "$(grep -q "full" /sys/class/net/${interface}/duplex; echo $?)" -eq "1" ]; then
          send_mqtt_message "error" "system/interface/${interface}/${TRUNC_HOSTNAME}" "<red>${interface} runs not in full-dumplex mode!</red>"
        fi
      fi
    fi
  done
}


# check_temperature implements:
#   * intel cpu temperature with coretemp
check_temperature () {
  for hwmon in $(ls -d /sys/class/hwmon/hwmon*); do
    if [ $(cat ${hwmon}/name) = "coretemp" ]; then
      for temp in $(ls ${hwmon}/temp*_label | grep -o "temp."); do
        value="$(cat ${hwmon}/${temp}_input)"
        limit="$(cat ${hwmon}/${temp}_crit)"
        if [ $(echo "${value} > (${limit}*0.95)" | bc) -eq "1" ]; then
          label="$(cat ${hwmon}/${temp}_label)"
          send_mqtt_message "error" "system/temp/${TRUNC_HOSTNAME}" "<red>${label} temp critical at $(echo "${value}/1000" | bc) °C</red>"
          break 2
        fi
      done
    fi
  done
}


# send system uptime in every run
ping () {
  hostname="$(hostname -f)"
  uptime="$(cat /proc/uptime | awk '{ print $1 }')"
  mosquitto_pub --capath /etc/ssl/certs/ -h "mng.ber.c3voc.de" -p 8883 -u "fahrplan" -P "than_feat7apart" -t "/voc/checkin" -m "{ \"name\": \"${hostname}\", \"interval\": \"60\", \"additional_data\": { \"uptime\": ${uptime} }}"
}

# general checks
ping
check_load
check_disk_space
check_raid
check_logs
check_interfaces
check_temperature

# special cases
if [ "0" -eq "$(hostnamectl status --static | grep -q "encoder"; echo $?)" ]; then
  check_recording
fi

exit 0
